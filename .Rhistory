## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
?matrix
mat <- matrix(c(4, 7, 2, 6), nrow=2, ncol=2, byrow=TRUE)
mat
x = makeCacheMatrix(x)
x = makeCacheMatrix(mat)
x
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
x <- list(a = 1:5, b=rnorm(10))
x
lapply(x, mean)
x <- matrix(1:10, 2, 5)
x
apply(x, 1, mean)
apply(x, 2, mean)
rowSums(x)
rowMeans(x)
quantile(x[1,], probs=c(0.25, 0.75))
?gl
gl(10, 3)
?interaction
log(-1)
log(-5:5)
mapply(-5:5, log)
mapply(log, -5:5)
?invisible
invisible(5)
5 == invisible(5)
?trace
sum(x)
tracebak()
sum(y)
tracebak()
traceback()
sum(y)
traceback()
log(-1)
traceback)_
traceback()
lm(yy-xx)
traceback()
m <- matrix()
is.na(m[1,1])
library(xlsx)
read.xlsx
?read.xlsx
??read.xlsx
3:6
dat = read.csv("~/foo.csv")
dat
dat = read.csv("~/foo.csv")
dat
sum(dat$Zip*dat$Ext,na.rm=T)
?xmlTreeParse
install.packages("XML")
library("XML")
?xmlTreeParse
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml ")
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", isURL=TRUE)
doc <- xmlTreeParse("~/Downloads/getdata-data-restaurants.xml")
doc
xpathApply(doc, zipcode=21231, xmlValue)
xpathApply(doc, "//zipcode[.=21231]", xmlValue)
?xpathApply
doc
xpathApply(doc, "//zipcode", xmlValue)
xpathApply(doc, "//a[@href]", xmlGetAttr, "href")
xpathApply(doc, "//zipcode")
xpathApply(doc[1], "//zipcode")
xpathApply(doc[[1], "//zipcode")
xpathApply(doc[[1]], "//zipcode")
doc[[1]]
doc[["//zipcode"]]
doc[["//row"]]
xmlValue(doc[["//zipcode"]])
doc[["//zipcode"]]
doc[[1]]
doc[[1]][[1]]
doc[[1]][[1]][[1]]
doc[[1]][[1]][[1]][[1]]
doc[[1]][[1]][[1]][[1]][["//zipcode"]]
doc[[1]][[1]][[1]][[1]][["/zipcode"]]
doc[[1]][[1]][[1]][[1]][["zipcode"]]
xpathApply(doc[[1]], "//zipcode")
?xpathAppluy
?xpathApply
getNodeSet(doc, "//zipcode")
doc <- xmlInternalTreeParse("~/Downloads/getdata-data-restaurants.xml")
getNodeSet(doc, "//zipcode")
getNodeSet(doc, "//zipcode[.=21231]")
getNodeSet(doc, "//zipcode[.==21231]")
getNodeSet(doc, "//row[zipcode=21231]")
count(getNodeSet(doc, "//row[zipcode=21231]"))
getNodeSet(doc, "//row[zipcode=21231]")
?fread
??fread
library(data.table)
install.packages("data.table")
library(data.table)
?fread
DT <- fread("~/Downloads/getdata-data-ss06pid.csv", header=TRUE)
head(DT)
?time
require(stats)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
tapply(DT$pwgtp15,DT$SEX,mean)
rowMeans(DT)[DT$SEX==1]
system.time(rowMeans(DT)[DT$SEX==1])
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
library(httr)
?oauth_app
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "d1b04854153f48583dba", "d4cc3ed61a915304b60958e0b9cc162a4a8eff6c")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "d1b04854153f48583dba", "d4cc3ed61a915304b60958e0b9cc162a4a8eff6c")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
setwd("/Users/ruben/Dropbox/Current/coursera/datascience/getting-data/getting-data-project")
getwd()
train.df <- read.table("UCI HAR Dataset/train/X_train.txt")
train.subj.df <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names=c("SubjectId"))
View(train.df)
View(train.df)
View(train.subj.df)
View(train.subj.df)
train.act.df <- read.table("UCI HAR Dataset/train/y_train.txt", col.names=c("ActivityCode"))
?data.frame
data.frame(x=1, y=1:10)
data.frame(x, y)
data.frame("x", "y")
data.frame(x=x, y=y)
map <- data.frame(origname=character(), goodname=character())
map
map.append("a", "b")
?append
append(map, "a", "b")
map <- data.frame(origname=character(), goodname=character())
map <- rbind(map, c("V1", "tBodyAccX-mean"))
map <- rbind(map, c("V2", "tBodyAccY-mean"))
map <- rbind(map, c("V3", "tBodyAccZ-mean"))
map <- rbind(map, c("V4", "tBodyAccX-std"))
map <- rbind(map, c("V5", "tBodyAccY-std"))
map <- rbind(map, c("V6", "tBodyAccZ-std"))
map <- rbind(map, c("V41", "tGravityAccX-mean"))
map <- rbind(map, c("V42", "tGravityAccY-mean"))
map <- rbind(map, c("V43", "tGravityAccZ-mean"))
map <- rbind(map, c("V44", "tGravityAccX-std"))
map <- rbind(map, c("V45", "tGravityAccY-std"))
map <- rbind(map, c("V46", "tGravityAccZ-std"))
map <- rbind(map, c("V81", "tBodyAccJerkX-mean"))
map <- rbind(map, c("V82", "tBodyAccJerkY-mean"))
map <- rbind(map, c("V83", "tBodyAccJerkZ-mean"))
map <- rbind(map, c("V84", "tBodyAccJerkX-std"))
map <- rbind(map, c("V85", "tBodyAccJerkY-std"))
map <- rbind(map, c("V86", "tBodyAccJerkZ-std"))
map <- rbind(map, c("V121", "tBodyGyroX-mean"))
map <- rbind(map, c("V122", "tBodyGyroY-mean"))
map <- rbind(map, c("V123", "tBodyGyroZ-mean"))
map <- rbind(map, c("V124", "tBodyGyroX-std"))
map <- rbind(map, c("V125", "tBodyGyroY-std"))
map <- rbind(map, c("V126", "tBodyGyroZ-std"))
map <- rbind(map, c("V161", "tBodyGyroJerkX-mean"))
map <- rbind(map, c("V162", "tBodyGyroJerkY-mean"))
map <- rbind(map, c("V163", "tBodyGyroJerkZ-mean"))
map <- rbind(map, c("V164", "tBodyGyroJerkX-std"))
map <- rbind(map, c("V165", "tBodyGyroJerkY-std"))
map <- rbind(map, c("V166", "tBodyGyroJerkZ-std"))
map <- rbind(map, c("V201", "tBodyAccMag-mean"))
map <- rbind(map, c("V202", "tBodyAccMag-std"))
map <- rbind(map, c("V214", "tGravityAccMag-mean"))
map <- rbind(map, c("V215", "tGravityAccMag-std"))
map <- rbind(map, c("V227", "tBodyAccJerkMag-mean"))
map <- rbind(map, c("V228", "tBodyAccJerkMag-std"))
map <- rbind(map, c("V240", "tBodyGyroMag-mean"))
map <- rbind(map, c("V241", "tBodyGyroMag-std"))
map <- rbind(map, c("V253", "tBodyGyroJerkMag-mean"))
map <- rbind(map, c("V254", "tBodyGyroJerkMag-std"))
map <- rbind(map, c("V266", "fBodyAccX-mean"))
map <- rbind(map, c("V267", "fBodyAccY-mean"))
map <- rbind(map, c("V268", "fBodyAccZ-mean"))
map <- rbind(map, c("V269", "fBodyAccX-std"))
map <- rbind(map, c("V270", "fBodyAccY-std"))
map <- rbind(map, c("V271", "fBodyAccZ-std"))
#map <- rbind(map, c("V294", "fBodyAccX-meanFreq"))
#map <- rbind(map, c("V295", "fBodyAccY-meanFreq"))
#map <- rbind(map, c("V296", "fBodyAccZ-meanFreq"))
map <- rbind(map, c("V345", "fBodyAccJerkX-mean"))
map <- rbind(map, c("V346", "fBodyAccJerkY-mean"))
map <- rbind(map, c("V347", "fBodyAccJerkZ-mean"))
map <- rbind(map, c("V348", "fBodyAccJerkX-std"))
map <- rbind(map, c("V349", "fBodyAccJerkY-std"))
map <- rbind(map, c("V350", "fBodyAccJerkZ-std"))
#map <- rbind(map, c("V373", "fBodyAccJerkX-meanFreq"))
#map <- rbind(map, c("V374", "fBodyAccJerkY-meanFreq"))
#map <- rbind(map, c("V375", "fBodyAccJerkZ-meanFreq"))
map <- rbind(map, c("V424", "fBodyGyroX-mean"))
map <- rbind(map, c("V425", "fBodyGyroY-mean"))
map <- rbind(map, c("V426", "fBodyGyroZ-mean"))
map <- rbind(map, c("V427", "fBodyGyroX-std"))
map <- rbind(map, c("V428", "fBodyGyroY-std"))
map <- rbind(map, c("V429", "fBodyGyroZ-std"))
#map <- rbind(map, c("V452", "fBodyGyroX-meanFreq"))
#map <- rbind(map, c("V453", "fBodyGyroY-meanFreq"))
#map <- rbind(map, c("V454", "fBodyGyroZ-meanFreq"))
map <- rbind(map, c("V503", "fBodyAccMag-mean"))
map <- rbind(map, c("V504", "fBodyAccMag-std"))
#map <- rbind(map, c("V513", "fBodyAccMag-meanFreq"))
map <- rbind(map, c("V516", "fBodyAccJerkMag-mean"))
map <- rbind(map, c("V517", "fBodyAccJerkMag-std"))
#map <- rbind(map, c("V526", "fBodyAccJerkMag-meanFreq"))
map <- rbind(map, c("V529", "fBodyGyroMag-mean"))
map <- rbind(map, c("V530", "fBodyGyroMag-std"))
#map <- rbind(map, c("V539", "fBodyGyroMag-meanFreq"))
map <- rbind(map, c("V542", "fBodyGyroJerkMag-mean"))
map <- rbind(map, c("V543", "fBodyGyroJerkMag-std"))
#map <- rbind(map, c("V552", "fBodyGyroJerkMag-meanFreq"))
map
?data.frame
map <- data.frame(origname=character(), goodname=character(), stringsAsFactors=FALSE)
map <- rbind(map, c("V1", "tBodyAccX-mean"))
map <- rbind(map, c("V2", "tBodyAccY-mean"))
map
?rbind
map <- data.frame(origname=character(), goodname=character(), stringsAsFactors=FALSE)
map <- rbind(map, c("V1", "tBodyAccX-mean"), stringsAsFactors=FALSE)
map <- rbind(map, c("V2", "tBodyAccY-mean"), stringsAsFactors=FALSE)
map
map <- data.frame(origname=character(), goodname=character())
map[nrows(map)+1,] <- c("V1", "tBodyAccX-mean")
map[nrows(map)+1,] <- c("V2", "tBodyAccY-mean")
nrows(foo)
map <- data.frame(origname=character(), goodname=character())
map[nrow(map)+1,] <- c("V1", "tBodyAccX-mean")
map[nrow(map)+1,] <- c("V2", "tBodyAccY-mean")
map
map <- data.frame(origname=character(), goodname=character(), stringsAsFactors=FALSE)
map[nrow(map)+1,] <- c("V1", "tBodyAccX-mean")
map[nrow(map)+1,] <- c("V2", "tBodyAccY-mean")
map
map[nrow(map)+1,] <- c("V3", "tBodyAccZ-mean")
map[nrow(map)+1,] <- c("V4", "tBodyAccX-std")
map[nrow(map)+1,] <- c("V5", "tBodyAccY-std")
map[nrow(map)+1,] <- c("V6", "tBodyAccZ-std")
map[nrow(map)+1,] <- c("V41", "tGravityAccX-mean")
map[nrow(map)+1,] <- c("V42", "tGravityAccY-mean")
map[nrow(map)+1,] <- c("V43", "tGravityAccZ-mean")
map[nrow(map)+1,] <- c("V44", "tGravityAccX-std")
map[nrow(map)+1,] <- c("V45", "tGravityAccY-std")
map[nrow(map)+1,] <- c("V46", "tGravityAccZ-std")
map[nrow(map)+1,] <- c("V81", "tBodyAccJerkX-mean")
map[nrow(map)+1,] <- c("V82", "tBodyAccJerkY-mean")
map[nrow(map)+1,] <- c("V83", "tBodyAccJerkZ-mean")
map[nrow(map)+1,] <- c("V84", "tBodyAccJerkX-std")
map[nrow(map)+1,] <- c("V85", "tBodyAccJerkY-std")
map[nrow(map)+1,] <- c("V86", "tBodyAccJerkZ-std")
map[nrow(map)+1,] <- c("V121", "tBodyGyroX-mean")
map[nrow(map)+1,] <- c("V122", "tBodyGyroY-mean")
map[nrow(map)+1,] <- c("V123", "tBodyGyroZ-mean")
map[nrow(map)+1,] <- c("V124", "tBodyGyroX-std")
map[nrow(map)+1,] <- c("V125", "tBodyGyroY-std")
map[nrow(map)+1,] <- c("V126", "tBodyGyroZ-std")
map[nrow(map)+1,] <- c("V161", "tBodyGyroJerkX-mean")
map[nrow(map)+1,] <- c("V162", "tBodyGyroJerkY-mean")
map[nrow(map)+1,] <- c("V163", "tBodyGyroJerkZ-mean")
map[nrow(map)+1,] <- c("V164", "tBodyGyroJerkX-std")
map[nrow(map)+1,] <- c("V165", "tBodyGyroJerkY-std")
map[nrow(map)+1,] <- c("V166", "tBodyGyroJerkZ-std")
map[nrow(map)+1,] <- c("V201", "tBodyAccMag-mean")
map[nrow(map)+1,] <- c("V202", "tBodyAccMag-std")
map[nrow(map)+1,] <- c("V214", "tGravityAccMag-mean")
map[nrow(map)+1,] <- c("V215", "tGravityAccMag-std")
map[nrow(map)+1,] <- c("V227", "tBodyAccJerkMag-mean")
map[nrow(map)+1,] <- c("V228", "tBodyAccJerkMag-std")
map[nrow(map)+1,] <- c("V240", "tBodyGyroMag-mean")
map[nrow(map)+1,] <- c("V241", "tBodyGyroMag-std")
map[nrow(map)+1,] <- c("V253", "tBodyGyroJerkMag-mean")
map[nrow(map)+1,] <- c("V254", "tBodyGyroJerkMag-std")
map[nrow(map)+1,] <- c("V266", "fBodyAccX-mean")
map[nrow(map)+1,] <- c("V267", "fBodyAccY-mean")
map[nrow(map)+1,] <- c("V268", "fBodyAccZ-mean")
map[nrow(map)+1,] <- c("V269", "fBodyAccX-std")
map[nrow(map)+1,] <- c("V270", "fBodyAccY-std")
map[nrow(map)+1,] <- c("V271", "fBodyAccZ-std")
#map[nrow(map)+1,] <- c("V294", "fBodyAccX-meanFreq")
#map[nrow(map)+1,] <- c("V295", "fBodyAccY-meanFreq")
#map[nrow(map)+1,] <- c("V296", "fBodyAccZ-meanFreq")
map[nrow(map)+1,] <- c("V345", "fBodyAccJerkX-mean")
map[nrow(map)+1,] <- c("V346", "fBodyAccJerkY-mean")
map[nrow(map)+1,] <- c("V347", "fBodyAccJerkZ-mean")
map[nrow(map)+1,] <- c("V348", "fBodyAccJerkX-std")
map[nrow(map)+1,] <- c("V349", "fBodyAccJerkY-std")
map[nrow(map)+1,] <- c("V350", "fBodyAccJerkZ-std")
#map[nrow(map)+1,] <- c("V373", "fBodyAccJerkX-meanFreq")
#map[nrow(map)+1,] <- c("V374", "fBodyAccJerkY-meanFreq")
#map[nrow(map)+1,] <- c("V375", "fBodyAccJerkZ-meanFreq")
map[nrow(map)+1,] <- c("V424", "fBodyGyroX-mean")
map[nrow(map)+1,] <- c("V425", "fBodyGyroY-mean")
map[nrow(map)+1,] <- c("V426", "fBodyGyroZ-mean")
map[nrow(map)+1,] <- c("V427", "fBodyGyroX-std")
map[nrow(map)+1,] <- c("V428", "fBodyGyroY-std")
map[nrow(map)+1,] <- c("V429", "fBodyGyroZ-std")
#map[nrow(map)+1,] <- c("V452", "fBodyGyroX-meanFreq")
#map[nrow(map)+1,] <- c("V453", "fBodyGyroY-meanFreq")
#map[nrow(map)+1,] <- c("V454", "fBodyGyroZ-meanFreq")
map[nrow(map)+1,] <- c("V503", "fBodyAccMag-mean")
map[nrow(map)+1,] <- c("V504", "fBodyAccMag-std")
#map[nrow(map)+1,] <- c("V513", "fBodyAccMag-meanFreq")
map[nrow(map)+1,] <- c("V516", "fBodyAccJerkMag-mean")
map[nrow(map)+1,] <- c("V517", "fBodyAccJerkMag-std")
#map[nrow(map)+1,] <- c("V526", "fBodyAccJerkMag-meanFreq")
map[nrow(map)+1,] <- c("V529", "fBodyGyroMag-mean")
map[nrow(map)+1,] <- c("V530", "fBodyGyroMag-std")
#map[nrow(map)+1,] <- c("V539", "fBodyGyroMag-meanFreq")
map[nrow(map)+1,] <- c("V542", "fBodyGyroJerkMag-mean")
map[nrow(map)+1,] <- c("V543", "fBodyGyroJerkMag-std")
#map[nrow(map)+1,] <- c("V552", "fBodyGyroJerkMag-meanFreq")
map
View(train.df)
View(train.df)
map <- data.frame(origname=character(), goodname=character(), stringsAsFactors=FALSE)
map[nrow(map)+1,] <- c("SubjectId", "SubjectId")
map[nrow(map)+1,] <- c("ActivityCode", "ActivityCode")
map[nrow(map)+1,] <- c("V1", "tBodyAccX-mean")
map[nrow(map)+1,] <- c("V2", "tBodyAccY-mean")
map[nrow(map)+1,] <- c("V3", "tBodyAccZ-mean")
map[nrow(map)+1,] <- c("V4", "tBodyAccX-std")
map[nrow(map)+1,] <- c("V5", "tBodyAccY-std")
map[nrow(map)+1,] <- c("V6", "tBodyAccZ-std")
map[nrow(map)+1,] <- c("V41", "tGravityAccX-mean")
map[nrow(map)+1,] <- c("V42", "tGravityAccY-mean")
map[nrow(map)+1,] <- c("V43", "tGravityAccZ-mean")
map[nrow(map)+1,] <- c("V44", "tGravityAccX-std")
map[nrow(map)+1,] <- c("V45", "tGravityAccY-std")
map[nrow(map)+1,] <- c("V46", "tGravityAccZ-std")
map[nrow(map)+1,] <- c("V81", "tBodyAccJerkX-mean")
map[nrow(map)+1,] <- c("V82", "tBodyAccJerkY-mean")
map[nrow(map)+1,] <- c("V83", "tBodyAccJerkZ-mean")
map[nrow(map)+1,] <- c("V84", "tBodyAccJerkX-std")
map[nrow(map)+1,] <- c("V85", "tBodyAccJerkY-std")
map[nrow(map)+1,] <- c("V86", "tBodyAccJerkZ-std")
map[nrow(map)+1,] <- c("V121", "tBodyGyroX-mean")
map[nrow(map)+1,] <- c("V122", "tBodyGyroY-mean")
map[nrow(map)+1,] <- c("V123", "tBodyGyroZ-mean")
map[nrow(map)+1,] <- c("V124", "tBodyGyroX-std")
map[nrow(map)+1,] <- c("V125", "tBodyGyroY-std")
map[nrow(map)+1,] <- c("V126", "tBodyGyroZ-std")
map[nrow(map)+1,] <- c("V161", "tBodyGyroJerkX-mean")
map[nrow(map)+1,] <- c("V162", "tBodyGyroJerkY-mean")
map[nrow(map)+1,] <- c("V163", "tBodyGyroJerkZ-mean")
map[nrow(map)+1,] <- c("V164", "tBodyGyroJerkX-std")
map[nrow(map)+1,] <- c("V165", "tBodyGyroJerkY-std")
map[nrow(map)+1,] <- c("V166", "tBodyGyroJerkZ-std")
map[nrow(map)+1,] <- c("V201", "tBodyAccMag-mean")
map[nrow(map)+1,] <- c("V202", "tBodyAccMag-std")
map[nrow(map)+1,] <- c("V214", "tGravityAccMag-mean")
map[nrow(map)+1,] <- c("V215", "tGravityAccMag-std")
map[nrow(map)+1,] <- c("V227", "tBodyAccJerkMag-mean")
map[nrow(map)+1,] <- c("V228", "tBodyAccJerkMag-std")
map[nrow(map)+1,] <- c("V240", "tBodyGyroMag-mean")
map[nrow(map)+1,] <- c("V241", "tBodyGyroMag-std")
map[nrow(map)+1,] <- c("V253", "tBodyGyroJerkMag-mean")
map[nrow(map)+1,] <- c("V254", "tBodyGyroJerkMag-std")
map[nrow(map)+1,] <- c("V266", "fBodyAccX-mean")
map[nrow(map)+1,] <- c("V267", "fBodyAccY-mean")
map[nrow(map)+1,] <- c("V268", "fBodyAccZ-mean")
map[nrow(map)+1,] <- c("V269", "fBodyAccX-std")
map[nrow(map)+1,] <- c("V270", "fBodyAccY-std")
map[nrow(map)+1,] <- c("V271", "fBodyAccZ-std")
#map[nrow(map)+1,] <- c("V294", "fBodyAccX-meanFreq")
#map[nrow(map)+1,] <- c("V295", "fBodyAccY-meanFreq")
#map[nrow(map)+1,] <- c("V296", "fBodyAccZ-meanFreq")
map[nrow(map)+1,] <- c("V345", "fBodyAccJerkX-mean")
map[nrow(map)+1,] <- c("V346", "fBodyAccJerkY-mean")
map[nrow(map)+1,] <- c("V347", "fBodyAccJerkZ-mean")
map[nrow(map)+1,] <- c("V348", "fBodyAccJerkX-std")
map[nrow(map)+1,] <- c("V349", "fBodyAccJerkY-std")
map[nrow(map)+1,] <- c("V350", "fBodyAccJerkZ-std")
#map[nrow(map)+1,] <- c("V373", "fBodyAccJerkX-meanFreq")
#map[nrow(map)+1,] <- c("V374", "fBodyAccJerkY-meanFreq")
#map[nrow(map)+1,] <- c("V375", "fBodyAccJerkZ-meanFreq")
map[nrow(map)+1,] <- c("V424", "fBodyGyroX-mean")
map[nrow(map)+1,] <- c("V425", "fBodyGyroY-mean")
map[nrow(map)+1,] <- c("V426", "fBodyGyroZ-mean")
map[nrow(map)+1,] <- c("V427", "fBodyGyroX-std")
map[nrow(map)+1,] <- c("V428", "fBodyGyroY-std")
map[nrow(map)+1,] <- c("V429", "fBodyGyroZ-std")
#map[nrow(map)+1,] <- c("V452", "fBodyGyroX-meanFreq")
#map[nrow(map)+1,] <- c("V453", "fBodyGyroY-meanFreq")
#map[nrow(map)+1,] <- c("V454", "fBodyGyroZ-meanFreq")
map[nrow(map)+1,] <- c("V503", "fBodyAccMag-mean")
map[nrow(map)+1,] <- c("V504", "fBodyAccMag-std")
#map[nrow(map)+1,] <- c("V513", "fBodyAccMag-meanFreq")
map[nrow(map)+1,] <- c("V516", "fBodyAccJerkMag-mean")
map[nrow(map)+1,] <- c("V517", "fBodyAccJerkMag-std")
#map[nrow(map)+1,] <- c("V526", "fBodyAccJerkMag-meanFreq")
map[nrow(map)+1,] <- c("V529", "fBodyGyroMag-mean")
map[nrow(map)+1,] <- c("V530", "fBodyGyroMag-std")
#map[nrow(map)+1,] <- c("V539", "fBodyGyroMag-meanFreq")
map[nrow(map)+1,] <- c("V542", "fBodyGyroJerkMag-mean")
map[nrow(map)+1,] <- c("V543", "fBodyGyroJerkMag-std")
#map[nrow(map)+1,] <- c("V552", "fBodyGyroJerkMag-meanFreq")
View(map)
View(map)
len(map)
length(map)
nrow(map)
ncol(map)
df <- data.frame()
df[x] = c(1, 2, 3)
df["x"] = c(1, 2, 3)
observations.df = data.frame(SubjectId =  combined.df[,"SubjectId"])
test.df <- read.table("UCI HAR Dataset/test/X_test.txt")
test.subj.df <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names=c("SubjectId"))
test.act.df <- read.table("UCI HAR Dataset/test/y_test.txt", col.names=c("ActivityCode"))
train.all.df <- cbind(train.subj.df, train.act.df, train.df)
test.all.df <- cbind(test.subj.df, test.act.df, test.df)
combined.df <- rbind(train.all.df, test.all.df)
observations.df = data.frame(SubjectId =  combined.df[,"SubjectId"])
View(observations.df)
View(observations.df)
observations.df[,"Activity"] = "NONE"
View(observations.df)
View(observations.df)
observations.df[combined.df["ActivityCode"]==1,"Activity"] = "WALKING"
View(observations.df)
View(observations.df)
combined.df["ActivityCode"]==1
combined.df[combined.df["ActivityCode"]==1,]
observations.df = data.frame(SubjectId =  combined.df[,"SubjectId"])
observations.df[,"ActivityCode"] = combined.df[,"ActivityCode"]
#observations.df[,"Activity"] = "NONE"
observations.df[combined.df["ActivityCode"]==1,"Activity"] = "WALKING"
observations.df[combined.df["ActivityCode"]==2,"Activity"] = "WALKING_UPSTAIRS"
observations.df[combined.df["ActivityCode"]==3,"Activity"] = "WALKING_DOWNSTAIRS"
observations.df[combined.df["ActivityCode"]==4,"Activity"] = "SITTING"
observations.df[combined.df["ActivityCode"]==5,"Activity"] = "STANDING"
observations.df[combined.df["ActivityCode"]==6,"Activity"] = "LAYING"
View(observations.df)
View(observations.df)
View(map)
for (i in 1:nrow(map)) {
observations.df[,map[i,"origname"]] = combined.df[,map[i,"goodname"]]
}
map[1,"origname"]
map[1,"goodname"]
for (i in 1:nrow(map)) {
observations.df[,map[i,"goodname"]] = combined.df[,map[i,"origname"]]
}
View(observations.df)
View(observations.df)
summary.observations.df <- ddply(observations.df,.(SubjectId, Activity),numcolwise(mean,na.rm = TRUE))
library(plyr)
summary.observations.df <- ddply(observations.df,.(SubjectId, Activity),numcolwise(mean,na.rm = TRUE))
View(summary.observations.df)
View(summary.observations.df)
?write.csv
write.table(summary.observations.df, file="summary-observations.csv")
write.csv(summary.observations.df, file="summary-observations.csv")
write.csv(summary.observations.df, file="summary-observations.csv", row.names = FALSE)
